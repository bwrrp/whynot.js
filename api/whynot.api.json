{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.9.22",
    "schemaVersion": 1003,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "canonicalReference": "whynot!",
  "docComment": "",
  "name": "whynot",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "whynot!",
      "name": "",
      "members": [
        {
          "kind": "Variable",
          "canonicalReference": "whynot!_default:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "_default: "
            },
            {
              "kind": "Content",
              "text": "{\n    Assembler: typeof "
            },
            {
              "kind": "Reference",
              "text": "Assembler",
              "canonicalReference": "whynot!default:class"
            },
            {
              "kind": "Content",
              "text": ";\n    VM: typeof "
            },
            {
              "kind": "Reference",
              "text": "VM",
              "canonicalReference": "whynot!default:class"
            },
            {
              "kind": "Content",
              "text": ";\n    compileVM: typeof "
            },
            {
              "kind": "Reference",
              "text": "compileVM",
              "canonicalReference": "whynot!compileVM:function"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "_default",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "whynot!Assembler:class",
          "docComment": "/**\n * The Assembler is used to generate a whynot program by appending instructions.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class Assembler<TInput, TRecord, TOptions = "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TInput",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TRecord",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TOptions",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "Assembler",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "whynot!Assembler#accept:member(1)",
              "docComment": "/**\n * The 'accept' instruction causes the VM to yield the current Thread's Trace upon completion, provided all input has been consumed. Otherwise, the Thread ends.\n *\n * @returns The new instruction\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accept(): "
                },
                {
                  "kind": "Reference",
                  "text": "Instruction",
                  "canonicalReference": "whynot!Instruction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TInput, TRecord, TOptions>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "accept"
            },
            {
              "kind": "Method",
              "canonicalReference": "whynot!Assembler#bad:member(1)",
              "docComment": "/**\n * The 'bad' instruction permanently lowers the priority of all threads originating in the current one.\n *\n * @param cost - Amount to increase badness with. Defaults to 1.\n *\n * @returns The new instruction\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bad(cost?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Instruction",
                  "canonicalReference": "whynot!Instruction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TInput, TRecord, TOptions>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "cost",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "bad"
            },
            {
              "kind": "Method",
              "canonicalReference": "whynot!Assembler#fail:member(1)",
              "docComment": "/**\n * The 'fail' instruction ends the current Thread.\n *\n * @param predicate - Optional callback to make the fail conditional, if this returns true the thread will end, otherwise it will continue.\n *\n * @returns The new instruction\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fail(predicate?: "
                },
                {
                  "kind": "Reference",
                  "text": "FailFunc",
                  "canonicalReference": "whynot!FailFunc:type"
                },
                {
                  "kind": "Content",
                  "text": "<TOptions>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Instruction",
                  "canonicalReference": "whynot!Instruction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TInput, TRecord, TOptions>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "predicate",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "fail"
            },
            {
              "kind": "Method",
              "canonicalReference": "whynot!Assembler#jump:member(1)",
              "docComment": "/**\n * The 'jump' instruction continues execution in the current Generation at any number of other locations. A new Thread will be spawned for each target.\n *\n * @param targets - Program counters at which to continue execution\n *\n * @returns The new instruction\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "jump(targets: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Instruction",
                  "canonicalReference": "whynot!Instruction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TInput, TRecord, TOptions>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "targets",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "jump"
            },
            {
              "kind": "Property",
              "canonicalReference": "whynot!Assembler#program:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly program: "
                },
                {
                  "kind": "Reference",
                  "text": "Instruction",
                  "canonicalReference": "whynot!Instruction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TInput, TRecord, TOptions>[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "program",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "whynot!Assembler#record:member(1)",
              "docComment": "/**\n * The 'record' instruction adds a custom record to the current Thread's trace and resumes execution at the next instruction in the same Generation.\n *\n * @param data - Data to record\n *\n * @param recorder - Callback to generate the record based on data and the current input position. Defaults to recording data.\n *\n * @returns The new instruction\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "record<TRecorder>(data: "
                },
                {
                  "kind": "Content",
                  "text": "TRecorder extends undefined ? TRecord : any"
                },
                {
                  "kind": "Content",
                  "text": ", recorder?: "
                },
                {
                  "kind": "Reference",
                  "text": "RecordFunc",
                  "canonicalReference": "whynot!RecordFunc:type"
                },
                {
                  "kind": "Content",
                  "text": "<TRecord, TOptions>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Instruction",
                  "canonicalReference": "whynot!Instruction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TInput, TRecord, TOptions>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "recorder",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "TRecorder",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "record"
            },
            {
              "kind": "Method",
              "canonicalReference": "whynot!Assembler#test:member(1)",
              "docComment": "/**\n * The 'test' instruction validates and consumes an input item.\n *\n * If the matcher returns true, execution continues in the next Generation, otherwise execution of the current Thread ends.\n *\n * @param matcher - Callback to invoke for the input, should return true to accept, false to reject.\n *\n * @param data - Data to be passed to the matcher callback. Defaults to null.\n *\n * @returns The new instruction\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "test(matcher: "
                },
                {
                  "kind": "Reference",
                  "text": "TestFunc",
                  "canonicalReference": "whynot!TestFunc:type"
                },
                {
                  "kind": "Content",
                  "text": "<TInput, TOptions>"
                },
                {
                  "kind": "Content",
                  "text": ", data?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Instruction",
                  "canonicalReference": "whynot!Instruction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TInput, TRecord, TOptions>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "matcher",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "test"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "whynot!compileVM:function(1)",
          "docComment": "/**\n * Convenience helper function that creates a new VM using the specified callback for compilation.\n *\n * @param compile - Function used to compile the program, invoked with an Assembler as the only parameter.\n *\n * @returns VM running the compiled program\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function compileVM<TInput, TRecord = "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", TOptions = "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ">(compile: "
            },
            {
              "kind": "Content",
              "text": "(assembler: "
            },
            {
              "kind": "Reference",
              "text": "Assembler",
              "canonicalReference": "whynot!default:class"
            },
            {
              "kind": "Content",
              "text": "<TInput, TRecord, TOptions>) => void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "VM",
              "canonicalReference": "whynot!default:class"
            },
            {
              "kind": "Content",
              "text": "<TInput, TRecord, TOptions>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "compile",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "TInput",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TRecord",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "typeParameterName": "TOptions",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "compileVM"
        },
        {
          "kind": "Class",
          "canonicalReference": "whynot!VM:class",
          "docComment": "/**\n * A virtual machine to execute whynot programs.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class VM<TInput, TRecord, TOptions = "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TInput",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TRecord",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TOptions",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "VM",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "whynot!VM:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `VM` class\n *\n * @param program - The program to run, as created by the Assembler\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(program: "
                },
                {
                  "kind": "Reference",
                  "text": "Instruction",
                  "canonicalReference": "whynot!Instruction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TInput, TRecord, TOptions>[]"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "program",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "whynot!VM#execute:member(1)",
              "docComment": "/**\n * Executes the program in the VM with the given input stream.\n *\n * @param input - An array of input items.\n *\n * @param options - Optional object passed to all instruction callbacks.\n *\n * @returns Result of the execution, containing all Traces that lead to acceptance of the input (if any)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "execute(input: "
                },
                {
                  "kind": "Content",
                  "text": "TInput[]"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "TOptions"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Result",
                  "canonicalReference": "whynot!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<TRecord>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "execute"
            }
          ],
          "implementsTokenRanges": []
        }
      ]
    }
  ]
}
